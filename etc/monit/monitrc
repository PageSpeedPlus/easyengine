#Enable Web Access
set httpd port 2812
     allow admin:easyengine
set daemon 60
set logfile /var/log/monit.log
# signature disable
# ssl enable
# pemfile /usr/local/ispconfig/interface/ssl/ispserver.pem      # The PEM file

# Mail
# set mailserver smtp.gmail.com port 587
# username "gmail_username" password "password" # this is the gmail account that will send the alert
# using tlsv1 with timeout 30 seconds
# set alert email@address.com with reminder on 15 cycles # this address will receive the alert
# set mail-format {
# from: gmail_username@gmail.com
# reply-to: gmail_username@gmail.com
# subject: DOMAIN.COM ALERT: $SERVICE $EVENT at $DATE
# message: Monit $ACTION $SERVICE at $DATE on $HOST: $DESCRIPTION.
# Sincerely,
# Your MonitRobot
# }

# ln -s /monit.d/system/sshd sshd
include /etc/monit/conf.d/*.conf

#Event Queue for 5000 events
set eventqueue basedir /var/monit slots 5000

# The System - Change numbers 2 and 1 in loadavg lines based on number of CPU cores on your system.
check system $HOST
     if loadavg (5min) > 2 then alert
     if loadavg (15min) > 1 then alert
     if memory usage > 80% for 4 cycles then alert
     if swap usage > 20% for 4 cycles then alert
     # Test the user part of CPU usage 
     if cpu usage (user) > 80% for 2 cycles then alert
     # Test the system part of CPU usage 
     if cpu usage (system) > 20% for 2 cycles then alert
     # Test the i/o wait part of CPU usage 
     if cpu usage (wait) > 80% for 2 cycles then alert
     # Test CPU usage including user, system and wait. Note that 
     # multi-core systems can generate 100% per core
     # so total CPU usage can be more than 100%
     if cpu usage > 200% for 4 cycles then alert
    
check filesystem rootfs with path /
     if space usage > 80% then alert

# Cron
       
check process crond with pidfile /var/run/crond.pid
     group system
     group crond
     start program = "/etc/init.d/cron start"
     stop  program = "/etc/init.d/cron stop"
     if 5 restarts with 5 cycles then timeout
     depend cron_bin
     depend cron_rc
     depend cron_spool
     
check file cron_bin with path /usr/sbin/cron
     group crond
     if failed checksum       then unmonitor
     if failed permission 755 then unmonitor
     if failed uid root       then unmonitor
     if failed gid root       then unmonitor
     
check file cron_rc with path "/etc/init.d/cron"
     group crond
     if failed checksum       then unmonitor
     if failed permission 755 then unmonitor
     if failed uid root       then unmonitor
     if failed gid root       then unmonitor
    
check directory cron_spool with path /var/spool/cron/crontabs
    group crond
    if failed permission 1730 then unmonitor
    if failed uid root        then unmonitor
    if failed gid crontab     then unmonitor
        

# MySQL Monitoring
#check process mysqld with pidfile "/var/run/mysqld/mysqld.pid"				
# 	if cpu > 80% for 2 cycles then alert

# PHP-FPM
#check process php5-fpm with pidfile "/var/run/php5-fpm.pid"
#	if cpu > 80% for 2 cycles then alert

# Nginx
#check process nginx with pidfile "/var/run/nginx.pid"
#	if cpu > 80% for 2 cycles then alert

# Fail2Ban
#check process fail2ban with pidfile /var/run/fail2ban/fail2ban.pid  
#        start program = "/etc/init.d/fail2ban start"  
#        stop program = "/etc/init.d/fail2ban stop" 

# System Monitoring 
#check system PUT_YOUR_HOSTNAME_HERE
#	if memory usage > 80% for 2 cycles then alert
#	if cpu usage (user) > 70% for 2 cycles then alert
#   if cpu usage (system) > 30% then alert
#   if cpu usage (wait) > 20% then alert
#	if loadavg (1min) > 6 for 2 cycles then alert 
#	if loadavg (5min) > 4 for 2 cycles then alert
#	if swap usage > 5% then alert
